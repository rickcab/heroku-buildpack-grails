#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# Unset as these cause issues with building but we want our
# other env vars available
unset JAVA_OPTS
unset JAVA_TOOL_OPTIONS

# fail fast
set -e

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
# parse args
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

if [ -z "$SASS_VERSION" ] ; then
    echo "*** No SASS_VERSION specified.  Defaulting to v3.2.1 ***"
    SASS_VERSION=3.2.1
fi


# source in common functions
. $BIN_DIR/common.sh

date

echo "Get common JVM build pack..."
curl --silent --location http://heroku-jvm-common.s3.amazonaws.com/jvm-buildpack-common.tar.gz | tar xz
. bin/util
. bin/java

date
export_env_dir $ENV_DIR

GRAILS_DIR=".grails"
GRAILS_CMD="grails"

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

install_yuicompressor() {
    echo "-----> Installing YUI Compressor 2.4.7..."
    GEM_BIN="$PWD/.gem/bin"
    if [ ! -d  "$GEM_BIN" ]; then
      mkdir -p $GEM_BIN
    fi

    # Add .gem/bin to PATH if not already specified
    if [[ ":$PATH:" != *":$GEM_BIN:"* ]]; then
        export PATH=$GEM_BIN/:$PATH
    fi

    curl --silent --location https://github.com/southern-experience/heroku-buildpack-php/raw/master/src/yuicompressor-2.4.7.jar.tar.gz | tar xz
    export YUI="$PWD/yuicompressor-2.4.7.jar"

    curl --silent --location https://raw.github.com/southern-experience/heroku-buildpack-php/master/src/yuicompress > $PWD/.gem/bin/yuicompress
    chmod +x .gem/bin/yuicompress
    echo "       done."
}

install_sass() {
    echo "-----> Installing SASS..."
    GEM_DIR="$PWD/.gem"
    if [ ! -d "$GEM_DIR" ]; then
      mkdir -p $GEM_DIR
    fi

    gem install sass --version "$SASS_VERSION" --no-rdoc --no-ri --install-dir "$PWD/.gem" | indent
    export GEM_PATH=$GEM_PATH:$GEM_DIR
    echo "       done."
}

build_assets() {
    # Build assets
    echo "-----> Compiling assets..."
    bash build-assets | indent
    echo "       done."
}

check_build_status() {
  if [ "${PIPESTATUS[*]}" != "0 0" ]; then
    echo " !     Failed to build app"
    exit 1
  fi
}

install_grails() {
  VER_TO_INSTALL=$1
  GRAILS_URL="http://dist.springframework.org.s3.amazonaws.com/release/GRAILS/grails-$VER_TO_INSTALL.zip"

  GRAILS_ZIP_FILE="grails-heroku.zip"
  echo "-----> Installing Grails $VER_TO_INSTALL....."
  curl --silent --max-time 150 --location $GRAILS_URL -o $GRAILS_ZIP_FILE

  # Error checking
  if [ ! -f $GRAILS_ZIP_FILE ]; then
    echo "-----> Error downloading Grails framework. Please try again..."
    exit 1
  fi
  if [ -z "`file $GRAILS_ZIP_FILE | grep Zip`" ]; then
    echo "-----> Error installing Grails framework or unsupported Grails framework version specified. Please review Dev Center for a list of supported versions."
    exit 1
  fi

  #use jar because unzip isn't available
  jar xf $GRAILS_ZIP_FILE
  rm $GRAILS_ZIP_FILE
  #copy to standard dir location
  mv grails-$VER_TO_INSTALL $GRAILS_DIR
  #make grails command executable
  chmod +x $GRAILS_DIR/bin/grails

  echo "-----> Done"
}

if [ ! -f $BUILD_DIR/application.properties ] ; then
    echo "-----> File not found: application.properties. This file is required. Build failed."
    echo " !     Failed to build app"
    exit 1
fi

GRAILS_VERSION=$(get_property $BUILD_DIR/application.properties 'app.grails.version')

echo "-----> Grails $GRAILS_VERSION app detected"
echo "       WARNING: The Grails buildpack is currently in Beta."
if [ ! -z "$BUILDPACK_URL" ] ; then
    echo "       Using Build Pack: $BUILDPACK_URL"
fi

if [ ! -d $CACHE_DIR ] ; then
  mkdir $CACHE_DIR
fi

# create default system.properties
if [ ! -f ${BUILD_DIR}/system.properties ]; then
  echo "java.runtime.version=1.6" > ${BUILD_DIR}/system.properties
fi

# install JDK
javaVersion=$(detect_java_version ${BUILD_DIR})
echo -n "-----> Installing OpenJDK ${javaVersion}..."
install_java ${BUILD_DIR} ${javaVersion}
jdk_overlay ${BUILD_DIR}
echo "done"

cd $CACHE_DIR

if [ -f $BUILD_DIR/grailsw ] ; then
    chmod +x $BUILD_DIR/grailsw
    GRAILS_CMD="./grailsw"
else
  # install grails
  if [ ! -d $GRAILS_DIR ]; then
    install_grails $GRAILS_VERSION
  else
    INSTALLED_GRAILS_VERSION=$(get_property $GRAILS_DIR/build.properties 'grails.version')
    if [ "$INSTALLED_GRAILS_VERSION" != "$GRAILS_VERSION" ] ; then
      echo "-----> Updating Grails version. Previous version was $INSTALLED_GRAILS_VERSION. Updating to $GRAILS_VERSION..."
      rm -rf $GRAILS_DIR
      install_grails $GRAILS_VERSION
    fi
  fi
fi

# JAVA_HOME is exported in install_java
export GRAILS_HOME=$CACHE_DIR/$GRAILS_DIR
export PATH=$GRAILS_HOME/bin:$PATH

# Install stuff we need for CSS and JS assets
install_sass
install_yuicompressor

cd $BUILD_DIR

build_assets

# if grails cache directory doesn't exist create it
if [ ! -d $CACHE_DIR/.grails_cache ]; then
  mkdir $CACHE_DIR/.grails_cache
fi

# create .grails directory in the user home and write a settings.groovy that points grails
# at the correct cache directory
if [ ! -d $HOME/.grails ]; then
  mkdir $HOME/.grails
fi

echo "grails.dependency.cache.dir = '$CACHE_DIR/.grails_cache'" >> $HOME/.grails/settings.groovy

date

# build app
if [ "$GRAILS_VERSION" != "1.3.7" ] ; then
    BUILDCMD_OPT="-plain-output"
fi

COMPILECMD="$GRAILS_CMD -Divy.default.ivy.user.dir=$CACHE_DIR compile --non-interactive"
echo "-----> Executing $COMPILECMD"
eval "$COMPILECMD" | sed -u 's/^/       /'
check_build_status

BUILDCMD="$GRAILS_CMD $BUILDCMD_OPT -Divy.default.ivy.user.dir=$CACHE_DIR war --non-interactive"
echo "-----> Executing $BUILDCMD"
eval "$BUILDCMD" | sed -u 's/^/       /'
check_build_status

date

if [ ! -d server ] ; then

    mkdir server

    if [ "jetty" == "$(get_property ${BUILD_DIR}/system.properties grails.application.container)" ] ; then
      SERVLET_VERSION=$(get_property $BUILD_DIR/grails-app/conf/BuildConfig.groovy 'grails.servlet.version')

      if [ "$SERVLET_VERSION" == '3.0' ]; then
        JETTY_RUNNER_VERSION=8.1.10.v20130312
      else
        JETTY_RUNNER_VERSION=7.5.4.v20111024
      fi

      echo "vendored:${JETTY_RUNNER_VERSION}" > ${CACHE_DIR}/jettyVersion
    fi

    if [ -f $CACHE_DIR/jettyVersion ] ; then
        JETTY_RUNNER_VERSION=$(cat $CACHE_DIR/jettyVersion | sed "s/vendored://g")
        echo "-----> No server directory found. Adding jetty-runner $JETTY_RUNNER_VERSION automatically."
        DEFAULT_RUNNER_JAR=server/jetty-runner.jar
        curl -fs http://s3pository.heroku.com/maven-central/org/mortbay/jetty/jetty-runner/$JETTY_RUNNER_VERSION/jetty-runner-$JETTY_RUNNER_VERSION.jar > $DEFAULT_RUNNER_JAR
        echo "vendored:$JETTY_RUNNER_VERSION" > server/jettyVersion
    else
        WEBAPP_RUNNER_VERSION=7.0.40.0
    echo "-----> No server directory found. Adding webapp-runner $WEBAPP_RUNNER_VERSION automatically."
        DEFAULT_RUNNER_JAR=server/webapp-runner.jar
        curl -fs http://s3pository.heroku.com/maven-central/com/github/jsimone/webapp-runner/$WEBAPP_RUNNER_VERSION/webapp-runner-$WEBAPP_RUNNER_VERSION.jar > $DEFAULT_RUNNER_JAR
    echo "vendored:$WEBAPP_RUNNER_VERSION" > server/webappRunnerVersion
    echo "vendored:$WEBAPP_RUNNER_VERSION" > $CACHE_DIR/webappRunnerVersion
    fi

    echo $DEFAULT_RUNNER_JAR > server/defaultRunnerJar
fi

PROFILE_PATH="$BUILD_DIR/.profile.d/grails.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo 'export PATH="/app/.jdk/bin:$PATH"' >> $PROFILE_PATH


# Setup our custom runner that binds the web port early to prevent boot timeouts
echo "-----> Compiling runner"
$JAVA_HOME/bin/javac -d $BUILD_DIR/server -cp $BUILD_DIR/server/jetty-runner.jar $BIN_DIR/../server/*.java


## Send Notification of Build
GRAILS_APP_NAME=$(get_property $BUILD_DIR/application.properties 'app.name')
GRAILS_APP_VERSION=$(get_property $BUILD_DIR/application.properties 'app.version')
echo "-----> Sending notification of build for $GRAILS_APP_NAME  Version: $GRAILS_APP_VERSION"
send_deploy_notification $GRAILS_APP_NAME "$APP_NAME Deployment" $GRAILS_APP_VERSION 'No Additional Information'


date
